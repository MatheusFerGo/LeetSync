name: Processar e Organizar Soluções do LeetCode

on:
  push:
    branches:
      - main

jobs:
  process:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- PASSO 1: ORGANIZA AS PASTAS ---
      - name: Organizar soluções em pastas de linguagem e dificuldade
        id: organize_folders # Adicionamos um ID para saber se algo foi movido
        run: |
          echo "Iniciando organização das pastas..."
          changes_made=false
          for problem_dir in */; do
            if [[ "$problem_dir" == ".git/" || "$problem_dir" == ".github/" || "$problem_dir" == "SQL/" || "$problem_dir" == "Python/" || "$problem_dir" == "CSharp/" ]]; then
              continue
            fi
            
            # ... (Toda a sua lógica de mover pastas que já funciona) ...
            base_name=$(basename "$problem_dir")
            readme_file="${problem_dir}README.md"
            difficulty=""
            if [[ -f "$readme_file" ]]; then
              difficulty_line=$(grep -o 'Difficulty-Easy\|Difficulty-Medium\|Difficulty-Hard' "$readme_file" | head -n 1)
              if [[ -n "$difficulty_line" ]]; then
                difficulty=$(echo "$difficulty_line" | cut -d'-' -f2)
              else
                continue
              fi
            else
              continue
            fi
            destination_path=""
            if ls "${problem_dir}"*.sql 1> /dev/null 2>&1; then
              destination_path="SQL/${difficulty}"
            elif ls "${problem_dir}"*.py 1> /dev/null 2>&1; then
              destination_path="Python/${difficulty}"
            elif ls "${problem_dir}"*.cs 1> /dev/null 2>&1; then
              destination_path="CSharp/${difficulty}"
            fi
            if [[ -n "$destination_path" ]]; then
              echo "  - Movendo ${base_name} para ${destination_path}/"
              mkdir -p "${destination_path}"
              git mv "${problem_dir}" "${destination_path}/"
              changes_made=true
            fi
          done
          echo "changes_made=$changes_made" >> $GITHUB_OUTPUT

      # --- PASSO 2: ATUALIZA O README (SÓ RODA SE HOUVE MUDANÇAS) ---
      - name: Preparar Python
        if: steps.organize_folders.outputs.changes_made == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Rodar script para atualizar as estatísticas do README
        if: steps.organize_folders.outputs.changes_made == 'true'
        run: python update_readme.py

      # --- PASSO 3: FAZ O COMMIT DE TODAS AS MUDANÇAS ---
      - name: Commitar e fazer push das alterações
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add -A
          
          if ! git diff --staged --quiet; then
            echo "Alterações encontradas. Commitando..."
            git commit -m "chore(auto): organizar soluções e atualizar estatísticas"
            git pull --rebase
            git push
          else
            echo "Nenhuma nova solução para processar."
          fi
