name: Organize LeetCode Solutions

on:
  push:
    branches:
      - main

jobs:
  organize:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Permissão necessária para fazer push

    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessário para o git ter o histórico completo

      - name: Organize solutions into language and difficulty directories
        run: |
          # ATIVA O MODO DE DEBUG - A linha mais importante!
          set -x

          # O resto do seu script...
          for lang in SQL Python CSharp; do
            mkdir -p "$lang/Easy" "$lang/Medium" "$lang/Hard"
          done

          for problem_dir in */; do
            if [[ "$problem_dir" == ".git/" || "$problem_dir" == ".github/" || "$problem_dir" == "SQL/" || "$problem_dir" == "Python/" || "$problem_dir" == "CSharp/" ]]; then
              continue
            fi
            
            echo "Debug: Processing folder -> '$problem_dir'"
            base_name=$(basename "$problem_dir")
            echo "Processing: $base_name"

            readme_file="${problem_dir}README.md"
            difficulty=""
            if [[ -f "$readme_file" ]]; then
              difficulty_line=$(grep -o 'Difficulty-Easy\|Difficulty-Medium\|Difficulty-Hard' "$readme_file" | head -n 1)
              if [[ -n "$difficulty_line" ]]; then
                difficulty=$(echo "$difficulty_line" | cut -d'-' -f2)
                echo "  - Difficulty found: $difficulty"
              else
                echo "  - Difficulty pattern not found in README. Skipping."
                continue
              fi
            else
              echo "  - README.md not found. Skipping."
              continue
            fi

            destination_path=""
            if ls "${problem_dir}"*.sql 1> /dev/null 2>&1; then
              destination_path="SQL/${difficulty}"
            elif ls "${problem_dir}"*.py 1> /dev/null 2>&1; then
              destination_path="Python/${difficulty}"
            elif ls "${problem_dir}"*.cs 1> /dev/null 2>&1; then
              destination_path="CSharp/${difficulty}"
            fi

            if [[ -n "$destination_path" ]]; then
              echo "  - Moving to ${destination_path}/"
              mkdir -p "${destination_path}"
              git mv "${problem_dir}" "${destination_path}/"
            fi
          done

      - name: Commit and Push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add -A

          # Verifica se há alguma mudança para commitar
          if ! git diff --staged --quiet; then
            echo "Changes found. Committing and pushing..."
            git commit -m "chore(auto): organize solutions into difficulty folders"
            git pull --rebase
            git push
          else
            echo "No changes to commit."
          fi
